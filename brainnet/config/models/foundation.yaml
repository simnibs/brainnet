# feature_extractor:
body:
  # model: UNet
  # kwargs:
  #   spatial_dims: 3
  #   in_channels: 1
  #   out_channels: 64
  #   channels: [64, 128, 256, 512] # [64, 128, 256, 512, 1024]
  #   strides: [2, 2, 2] #[1, 1, 1, 1]
  #   # defaults:
  #   num_res_units: 2
  #   # act: PRELU
  #   # norm: INSTANCE
  #   # dropout: 0.0
  #   # bias: true
  #   # adn_ordering: NDA # order of activation, dropout, normalization

  model: UNet
  kwargs:
    spatial_dims: 3
    in_channels: 1
    encoder_channels: [[32], [64], [96], [128], [160]]
    decoder_channels: [[128], [96], [64], [64]]

# model: RegUNet
# kwargs:
#   spatial_dims: 3
#   in_channels: 1
#   num_channel_initial: 64
#   depth: 3
#   out_channels: 64

# DEFINE TASKS

# NOTES:
# - Number of `in_channels` are given by `out_channels` of the feature extractor

# NOTE:

# If a task name matches that of an optional image then this loss is only
# computed for samples where this image is available. This is typically
# relevant for image synthesis.

heads:
  surface:
    module:
      name: SurfaceModule
      kwargs:
        prediction_res: 4 # available resolutions: 0 - 6
    runtime_kwargs:
      return_pial: true

  # segmentation:
  #   module:
  #     name: SegmentationModule
  #     kwargs:
  #       out_channels: 33

  #   postprocess: true
  #   postprocess_kwargs:
  #     labels: #[...]



  # biasfield:
  #   module: BiasFieldModule
  #   # The features to use for bias field estimation. Specify the string
  #   # (passed to the `get_submodule` method of the network) that extracts the
  #   # desired output. To find this, run
  #   #
  #   #   monai.networks.nets.[ network name ]( network kwargs )
  #   #
  #   # check the architecture, and what string is needed to pass to `get_submodule`.
  #   # feature_submodule: null # = output features
  #   feature_submodule: "model.1.submodule.1.submodule.1.submodule.1"
  #   module_kwargs:
  #     out_channels: 1


  # T1:
  #   module: SuperResolutionModule
  #   module_kwargs:
  #     out_channels: 1


  # PD:
  #   module: SuperResolutionModule
  #   module_kwargs:
  #     out_channels: 1

  # CT:
  #   module: SuperResolutionModule
  #   module_kwargs:
  #     out_channels: 1
      # extra_convs=[32,16] (# features from extractor) -> 32 -> 16 -> 1
