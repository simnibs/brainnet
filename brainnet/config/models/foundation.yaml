feature_extractor:
  model: UNet
  kwargs:
    spatial_dims: 3
    in_channels: 1
    out_channels: 64
    channels: [64, 128, 256, 512, 1024]
    strides: [1, 1, 1, 1]
    # defaults:
    # act: PRELU
    # norm: INSTANCE
    # dropout: 0.0
    # bias: true
    # adn_ordering: NDA # order of activation, dropout, normalization

# DEFINE TASKS

# Defining tasks
# --------------
# Tasks is a dict defining the desired "tasks" to perform. These are chained
# after the feature extraction stage. Each task is defined by a name and a dict
# with the following entries
#
# module              str   name of valid task module as found in MedID.models.task_modules.py.
# module_kwargs       dict  key-word arguments to pass to the module constructor.
# postprocess         bool  if a task module defines a `postprocess` method then apply this.
# postprocess_kwargs  dict  key-word arguments to pass to this method postprocess method.

# NOTES:
# - Number of `in_channels` are given by `out_channels` of the feature extractor

tasks:
  segment:
    module: SegmentationModule
    module_kwargs:
      out_channels: 32
    postprocess: true
    postprocess_kwargs:
      labels: [...]
  t1:
    module: SuperResolutionModule
    module_kwargs:
      out_channels: 1
  ct:
    module: SuperResolutionModule
    module_kwargs:
      out_channels: 1
      # extra_convs=[32,16] (64 features from extractor) -> 32 -> 16 -> 1
  biasfield:
    module: BiasFieldModule
    module_kwargs:
      out_channels: 1
      # The features to use for bias field estimation. Specify the string
      # (passed to the `get_submodule` method of the network) that extracts the
      # desired output. To find this, run
      #
      #   monai.networks.nets.[ network name ]( network kwargs )
      #
      # check the architecture, and what string is needed to pass to `get_submodule`.
      # feature_submodule: null # null = output features
      feature_submodule: "model.1.submodule.1.submodule.1.submodule.1"
  surface:
    module: SurfaceModule
    module_kwargs:
      prediction_res: 5 # 0-6
